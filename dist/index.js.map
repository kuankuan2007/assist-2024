{
  "version": 3,
  "sources": ["../src/KJSON.ts", "../src/ObjectControl.ts", "../src/Other.ts"],
  "sourcesContent": ["const specialValues: {\r\n  name: string;\r\n  matcher: (\r\n    target: unknown,\r\n    saveList: unknown[],\r\n    dataMap: unknown[],\r\n    dfsTransform: (obj: unknown) => unknown,\r\n    limitingDraft: boolean\r\n  ) => undefined | string;\r\n  replacer: (value: string, saveList: unknown[]) => unknown;\r\n}[] = [\r\n  {\r\n    name: 'date',\r\n    matcher: (target) => (target instanceof Date ? target.getTime().toString() : void 0),\r\n    replacer: (value) => new Date(Number(value)),\r\n  },\r\n  {\r\n    name: 'nan',\r\n    matcher: (target) => (Number.isNaN(target as number) ? '' : void 0),\r\n    replacer: () => NaN,\r\n  },\r\n  {\r\n    name: 'null',\r\n    matcher: (target) => (target === null ? '' : void 0),\r\n    replacer: () => null,\r\n  },\r\n  {\r\n    name: 'string',\r\n    matcher: (target) => (typeof target === 'string' ? target : void 0),\r\n    replacer: (value) => value,\r\n  },\r\n  {\r\n    name: 'array',\r\n    matcher: (target, saveList, dataMap, dfsTransform, limitingDraft) => {\r\n      if (!Array.isArray(target)) return void 0;\r\n      const index = dataMap.findIndex((i) =>\r\n        limitingDraft ? KObjectControl.isEqual(i, target) : i === target\r\n      );\r\n      if (index !== -1) return index.toString();\r\n      const id = saveList.length;\r\n      saveList[id] = null;\r\n      dataMap[id] = target;\r\n      saveList[id] = target.map((i) => dfsTransform(i));\r\n      return id.toString();\r\n    },\r\n    replacer: (value, saveList) => {\r\n      return saveList[parseInt(value)];\r\n    },\r\n  },\r\n  {\r\n    name: 'object',\r\n    matcher: (target, saveList, dataMap, dfsTransform, limitingDraft) => {\r\n      if (!(target instanceof Object)) return void 0;\r\n      const index = dataMap.findIndex((i) =>\r\n        limitingDraft ? KObjectControl.isEqual(i, target) : i === target\r\n      );\r\n      if (index !== -1) return index.toString();\r\n      const id = saveList.length;\r\n      saveList[id] = {};\r\n      dataMap[id] = target;\r\n      for (const i in target) {\r\n        (saveList[id] as Record<string, unknown>)[i] = dfsTransform(\r\n          target[i as keyof typeof target]\r\n        );\r\n      }\r\n      return id.toString();\r\n    },\r\n    replacer: (value, saveList) => {\r\n      return saveList[parseInt(value)];\r\n    },\r\n  },\r\n];\r\nfunction parse(data: string): unknown {\r\n  try {\r\n    const dataList = JSON.parse(data);\r\n    return structureKJSONList(dataList);\r\n  } catch {\r\n    throw new Error('Invalid K-JSON data');\r\n  }\r\n}\r\nfunction structureKJSONList(data: unknown): unknown {\r\n  if (!Array.isArray(data)) {\r\n    return data;\r\n  }\r\n  function dfsTransform(target: unknown, dataList: unknown[]): unknown {\r\n    if (target instanceof Object) {\r\n      for (const i in target) {\r\n        (target as Record<string, unknown>)[i] = dfsTransform(\r\n          target[i as keyof typeof target],\r\n          dataList\r\n        );\r\n      }\r\n    } else if (typeof target === 'string') {\r\n      const result = /^(.*)::([a-zA-Z\\d]+)$/s.exec(target);\r\n      if (result) {\r\n        const [, data, type] = result;\r\n        let flag = false;\r\n        for (const i of specialValues) {\r\n          if (i.name === type) {\r\n            flag = true;\r\n            target = i.replacer(data, dataList);\r\n          }\r\n        }\r\n        if (!flag) {\r\n          console.warn('Invalid K-JSON data which has unknown type');\r\n        }\r\n      } else {\r\n        console.warn('Invalid K-JSON data which is string but could not be parsed');\r\n      }\r\n    }\r\n    return target;\r\n  }\r\n  dfsTransform(data, data);\r\n  return data[0];\r\n}\r\nfunction stringify(obj: unknown, limitingDraft: boolean = false): string {\r\n  return JSON.stringify(normalizeToKJSONList(obj, limitingDraft));\r\n}\r\nfunction normalizeToKJSONList(obj: unknown, limitingDraft: boolean = false) {\r\n  const saveList: unknown[] = [];\r\n  const dataMap: unknown[] = [];\r\n  function dfsTransform(obj: unknown): unknown {\r\n    for (const i of specialValues) {\r\n      const result = i.matcher(obj, saveList, dataMap, dfsTransform, limitingDraft);\r\n      if (result !== void 0) {\r\n        return `${result}::${i.name}`;\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n  const result = dfsTransform(obj);\r\n  return saveList.length ? saveList : result;\r\n}\r\nconst _KJSON = {\r\n  parse,\r\n  stringify,\r\n  structureKJSONList,\r\n  normalizeToKJSONList,\r\n  specialValues,\r\n} as const;\r\nObject.defineProperty(globalThis, 'KJSON', {\r\n  enumerable: false,\r\n  value: _KJSON,\r\n  writable: false,\r\n});\r\ndeclare global {\r\n  // eslint-disable-next-line no-var\r\n  var KJSON: typeof _KJSON;\r\n}\r\nexport {};\r\n", "const specialObjectCompare: ((value1: unknown, value2: unknown) => boolean | null)[] = [\r\n  (value1, value2) => {\r\n    if (value1 instanceof Date && value2 instanceof Date) {\r\n      return value1.getTime() === value2.getTime();\r\n    }\r\n    return null;\r\n  },\r\n  (value1, value2) => {\r\n    if (value1 instanceof Set && value2 instanceof Set) {\r\n      if (value1.size !== value2.size) return false;\r\n      for (const i of value1) {\r\n        if (!value2.has(i)) return false;\r\n      }\r\n      return true;\r\n    }\r\n    return null;\r\n  },\r\n  (value1, value2) => {\r\n    if (Number.isNaN(value1) && Number.isNaN(value2)) return true;\r\n    return null;\r\n  },\r\n];\r\nexport const specialObjectClone: ((value: unknown) => unknown | null)[] = [\r\n  (value) => {\r\n    if (value instanceof Date) {\r\n      return new Date(value.getTime());\r\n    }\r\n    return null;\r\n  },\r\n  (value) => {\r\n    if (value instanceof Set) {\r\n      return new Set(value);\r\n    }\r\n    return null;\r\n  },\r\n];\r\nfunction isEqual(value1: unknown, value2: unknown, recursion: boolean = true): boolean {\r\n  if (value1 === value2) return true;\r\n  if (typeof value1 === 'object' && typeof value2 === 'object') {\r\n    if (value1 === null || value2 === null) return false;\r\n    for (const i of _KObjectControl.specialObjectCompare) {\r\n      const result = i(value1, value2);\r\n      if (result !== null) {\r\n        return result;\r\n      }\r\n    }\r\n    if (recursion) {\r\n      if (Array.isArray(value1) && Array.isArray(value2)) {\r\n        if (value1.length !== value2.length) return false;\r\n        for (let i = 0; i < value1.length; i++) {\r\n          if (!_KObjectControl.isEqual(value1[i], value2[i], recursion)) return false;\r\n        }\r\n        return true;\r\n      } else {\r\n        if (Object.getPrototypeOf(value1) !== Object.getPrototypeOf(value2)) return false;\r\n        if (\r\n          !_KObjectControl.isEqual(\r\n            _KObjectControl.getOwnProperties(value1),\r\n            _KObjectControl.getOwnProperties(value2),\r\n            false\r\n          )\r\n        )\r\n          return false;\r\n        for (const i of _KObjectControl.getOwnProperties(value1)) {\r\n          if (!_KObjectControl.isEqual(value1[i], value2[i], true)) return false;\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  } else {\r\n    if (Number.isNaN(value1) && Number.isNaN(value2)) return true;\r\n    return value1 === value2;\r\n  }\r\n}\r\nfunction clone<T>(\r\n  value: T,\r\n  recursion: boolean = true,\r\n  map: WeakMap<object, unknown> = new WeakMap()\r\n): T {\r\n  if (value instanceof Object) {\r\n    if (map.has(value)) return map.get(value) as T;\r\n    for (const i of _KObjectControl.specialObjectClone) {\r\n      const result = i(value);\r\n      if (result !== null) {\r\n        map.set(value, result);\r\n        return result as T;\r\n      }\r\n    }\r\n    if (recursion) {\r\n      if (Array.isArray(value)) {\r\n        const result: unknown[] = [];\r\n        map.set(value, result);\r\n        for (let i = 0; i < value.length; i++) {\r\n          result[i] = _KObjectControl.clone(value[i], recursion, map);\r\n        }\r\n        return result as T;\r\n      } else {\r\n        const result: Record<string | symbol, unknown> = {};\r\n        map.set(value, result);\r\n        for (const i of _KObjectControl.getOwnProperties(value)) {\r\n          result[i as keyof typeof result] = _KObjectControl.clone(\r\n            value[i as keyof T],\r\n            recursion,\r\n            map\r\n          );\r\n        }\r\n        return result as T;\r\n      }\r\n    } else {\r\n      console.warn('ObjectControl cannot clone non-recursive object');\r\n      return value;\r\n    }\r\n  } else {\r\n    return value;\r\n  }\r\n}\r\nfunction getOwnProperties<T extends object>(value: T): Set<keyof T> {\r\n  return new Set([\r\n    ...Object.getOwnPropertyNames(value),\r\n    ...Object.getOwnPropertySymbols(value),\r\n  ]) as Set<keyof T>;\r\n}\r\nconst _KObjectControl = {\r\n  isEqual,\r\n  clone,\r\n  getOwnProperties,\r\n  specialObjectCompare,\r\n  specialObjectClone,\r\n} as const;\r\nexport {};\r\nglobalThis.KObjectControl = _KObjectControl;\r\nObject.defineProperty(globalThis, 'KObjectControl', {\r\n  enumerable: false,\r\n  writable: false,\r\n  value: _KObjectControl,\r\n});\r\ndeclare global {\r\n  // eslint-disable-next-line no-var\r\n  var KObjectControl: typeof _KObjectControl;\r\n}\r\n", "function clamp(min: number, value: number, max: number) {\n  return Math.min(Math.max(min, value), max);\n}\nconst _KOther = {\n  clamp,\n} as const;\nexport {};\ndeclare global {\n  // eslint-disable-next-line no-var\n  var KOther: typeof _KOther;\n}\nObject.defineProperty(globalThis, 'KOther', { value: _KOther, writable: false, enumerable: false });\nexport {};\n"],
  "mappings": "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",
  "names": ["data", "obj", "result"]
}
